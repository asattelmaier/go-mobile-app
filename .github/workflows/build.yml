name: Go Mobile App CI

on:
  push:
    branches: [ master, ios-ci-test ]
  pull_request:
    branches: [ master ]

jobs:
  buildAndroidApp:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '12.x'
          distribution: 'adopt'

      - name: Set up flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # TODO: The flutter steps could be done only once
      - name: Install dependencies
        run: flutter pub get

      - name: Build app
        run: flutter pub run build_runner build

      - name: Test app
        run: flutter test

      - name: Build apk
        run: flutter build apk --dart-define=ENV=production

  buildAndDeployIOSApp:

    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '12.x'
          distribution: 'adopt'

      - name: Set up flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      # TODO: The flutter steps could be done only once
      - name: Install dependencies
        run: flutter pub get

      - name: Build app
        run: flutter pub run build_runner build

      - name: Test app
        run: flutter test

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/$PROVISIONING_PROFILE_NAME.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS package App Store (ipa) file
        env:
          GO_APPLE_DEVELOPMENT_TEAM_ID: ${{ secrets.GO_APPLE_DEVELOPMENT_TEAM_ID }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          sed -i'' -e 's/PROVISIONING_PROFILE_NAME_PLACEHOLDER/'"$PROVISIONING_PROFILE_NAME"'/g; s/GO_APPLE_DEVELOPMENT_TEAM_ID_PLACEHOLDER/'"$GO_APPLE_DEVELOPMENT_TEAM_ID"'/g' $PWD/ios/ExportOptions.plist
          flutter build ipa \
            --dart-define=ENV=production \
            --export-options-plist=$PWD/ios/ExportOptions.plist

      #TODO: Split build and deploy steps in separate jobs
      - name: Deploy App
        env:
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          mkdir ~/private_keys/
          echo -n "$APPSTORE_API_PRIVATE_KEY" | base64 --decode --output ~/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
          current_version=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          deployment=$(xcrun altool --upload-app --type ios \
              -f build/ios/ipa/*.ipa \
              --apiKey $APPSTORE_API_KEY_ID \
              --apiIssuer $APPSTORE_ISSUER_ID 2>&1  || true)
          
          echo "Current version: $current_version"
          
          if [[ $deployment == *"The provided entity includes an attribute with a value that has already been used"* ]]; then
            deployed_version=$(echo "$deployment" | grep -m 1 -o 'previousBundleVersion = "[^"]*"' | cut -d'"' -f2)
          
            echo "Deployed version: $deployed_version"

            if [[ "$deployed_version" == "$current_version" ]]; then
              echo "No deployment since the current version ($current_version) equals the deployed version ($deployed_version)."
              exit 0
            else
              echo $deployment >&2
              exit 1
            fi
          fi
          
          if [[ $deployment == *"UPLOAD SUCCEEDED"* ]]; then
            echo "Successful deployed Version $current_version"
            exit 0
          else
            echo $deployment >&2
            exit 1
          fi
